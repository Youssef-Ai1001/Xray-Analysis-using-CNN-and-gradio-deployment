import os
import numpy as np
import gradio as gr
import tensorflow as tf
from tensorflow import keras
from PIL import Image
import datetime

# Configuration
MODEL_PATH = "model/pneumonia_detection_Vision_Model.keras"
CLASSES = ["Normal", "Abnormal"]
REPORT_DIR = "reports"

os.makedirs(REPORT_DIR, exist_ok=True)  # Ensure report directory exists

def load_model():
    try:
        model = keras.models.load_model(MODEL_PATH)
        print("✅ Model loaded successfully!")
        return model
    except Exception as e:
        print(f"❌ Error loading model: {e}")
        return None

def preprocess_image(image):
    if image.mode != 'RGB':
        image = image.convert('RGB')
    image = image.resize((224, 224))
    img_array = np.array(image) / 255.0
    return np.expand_dims(img_array, axis=0)

def generate_patient_report(patient_name, predicted_class, confidence):
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    report_content = (
        f"🩺 Patient Report\n"
        f"--------------------------\n"
        f"🧑 Patient Name : {patient_name or 'Anonymous'}\n"
        f"🗓️ Date         : {timestamp}\n"
        f"🧪 Result       : {predicted_class}\n"
        f"📊 Confidence   : {confidence:.2f}%\n"
        f"--------------------------\n"
        f"📌 Note: This prediction is generated by a deep learning model. Please consult a medical professional for final diagnosis.\n"
    )
    filename = f"{REPORT_DIR}/Report_{patient_name or 'Anonymous'}_{timestamp.replace(':', '-')}.txt"
    with open(filename, "w", encoding='utf-8') as f:
        f.write(report_content)
    return filename, report_content

def predict_xray(image, patient_name):
    if image is None:
        print("⚠️ No image provided!")
        return {"Error": "No image provided"}, None
    
    global model
    if 'model' not in globals() or model is None:
        print("🔁 Loading model...")
        model = load_model()
        if model is None:
            print("❌ Model loading failed.")
            return {"Error": "Failed to load model"}, None

    try:
        print("🖼️ Preprocessing image...")
        processed_image = preprocess_image(image)
        print("✅ Image preprocessed.")

        print("🤖 Making prediction...")
        prediction = model.predict(processed_image)
        print(f"📈 Raw prediction output: {prediction}")

        prediction_value = prediction[0][0] if prediction.ndim == 2 else prediction[0]
        class_index = 1 if prediction_value > 0.5 else 0
        confidence = prediction_value if class_index == 1 else 1 - prediction_value
        predicted_class = CLASSES[class_index]

        print(f"✅ Predicted: {predicted_class} - Confidence: {confidence * 100:.2f}%")

        report_file, report_content = generate_patient_report(patient_name, predicted_class, confidence * 100)
        print(f"📄 Report saved at: {report_file}")

        result = {
            "Class": predicted_class,
            "Confidence": f"{confidence * 100:.2f}%",
            "Message": "📝 Patient report generated successfully!"
        }

        return result, report_file

    except Exception as e:
        print(f"❌ Exception occurred: {str(e)}")
        return {"Error": str(e)}, None


# Gradio UI
def create_interface():
    with gr.Blocks(title="🩻 Smart X-Ray Classifier") as app:
        gr.Markdown(
            """
            # 🩻 **X-Ray Classification System**
            Welcome to the Pneumonia Detection System. Upload a chest X-ray and get a prediction within seconds.
            """,
            elem_classes="title"
        )

        with gr.Row():
            with gr.Column(scale=1):
                patient_name = gr.Textbox(label="👤 Patient Name (Optional)", placeholder="Enter patient name")
                input_image = gr.Image(type="pil", label="📷 Upload X-ray Image")
                submit_btn = gr.Button("🔍 Analyze X-ray", variant="primary")
            
            with gr.Column(scale=1):
                output = gr.JSON(label="📊 Classification Results")
                report_output = gr.File(label="📄 Download Report")

        submit_btn.click(
            fn=predict_xray,
            inputs=[input_image, patient_name],
            outputs=[output, report_output]
        )

        with gr.Accordion("ℹ️ Instructions", open=False):
            gr.Markdown("""
            1. Enter the patient name (optional).
            2. Upload an X-ray image (JPEG/PNG).
            3. Click "Analyze X-ray" to get results.
            4. Download the patient report.
            """)

        with gr.Accordion("📚 About the System", open=False):
            gr.Markdown("""
            This application uses a pre-trained deep learning model based on **MobileNetV2** to detect abnormalities in chest X-ray images.
            It is built using **TensorFlow** and **Gradio**, intended for educational and research purposes only.
            """)

    return app

if __name__ == "__main__":
    model = load_model()
    app = create_interface()
    app.launch(share=True, server_name="127.1.1.1", server_port=6060)
